#!/usr/bin/env python3

scales = [1.0, 1.25, 1.5, 2.0]

import subprocess
import re

output = subprocess.check_output(["hyprctl", "monitors"]).decode()
blocks = output.strip().split("\n\n")
monitors = []

scale_idx = None

for block in blocks:
    name = re.search(r"Monitor (\S+)", block).group(1)
    res_line = re.search(r"\s+(\d+)x(\d+)@([\d.]+) at (-?\d+)x(-?\d+)", block)
    scale = float(re.search(r"scale: ([\d.]+)", block).group(1))
    transform = int(re.search(r"transform: (\d+)", block).group(1))
    width = int(res_line.group(1))
    height = int(res_line.group(2))
    refresh = res_line.group(3)
    pos_x = int(res_line.group(4))
    pos_y = int(res_line.group(5))

    if scale_idx is None:
        try:
            scale_idx = scales.index(scale)

            if scale_idx + 1 >= len(scales):
                scale_idx = 0
            else:
                scale_idx += 1
        except ValueError:
            scale_idx = 0

    if pos_x < 0 and pos_y == 0:
        new_pos = 'auto-left'
    elif pos_x < 0 and pos_y < 0:
        new_pos = 'auto-left,auto-up'
    elif pos_x < 0 and pos_y > 0:
        new_pos = 'auto-left,auto-down'
    elif pos_x > 0 and pos_y == 0:
        new_pos = 'auto-right'
    elif pos_x > 0 and pos_y < 0:
        new_pos = 'auto-right,auto-up'
    elif pos_x > 0 and pos_y > 0:
        new_pos = 'auto-right,auto-down'
    elif pos_x == 0 and pos_y < 0:
        new_pos = 'auto-up'
    elif pos_x == 0 and pos_y > 0:
        new_pos = 'auto-down'
    else:
        new_pos = '0x0'

    cmd = [
        "hyprctl", "keyword", "monitor",
        f"{name},{width}x{height}@{refresh},{new_pos},{scales[scale_idx]},transform,{transform}"
    ]

    subprocess.run(cmd, capture_output=True)

print(scales[scale_idx])
